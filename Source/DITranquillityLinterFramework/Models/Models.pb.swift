// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Models.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Protobuf_AccessLevel: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case `internal` // = 0
  case `private` // = 1
  case `fileprivate` // = 2
  case `public` // = 3
  case `open` // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .internal
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internal
    case 1: self = .private
    case 2: self = .fileprivate
    case 3: self = .public
    case 4: self = .open
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .internal: return 0
    case .private: return 1
    case .fileprivate: return 2
    case .public: return 3
    case .open: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Protobuf_TypedCodableValue: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypedCodableValue"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var floatValue: Float {
    get {
      if case .floatValue(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .floatValue(newValue)}
  }

  var boolValue: Bool {
    get {
      if case .boolValue(let v)? = _storage._value {return v}
      return false
    }
    set {_uniqueStorage()._value = .boolValue(newValue)}
  }

  var stringValue: String {
    get {
      if case .stringValue(let v)? = _storage._value {return v}
      return String()
    }
    set {_uniqueStorage()._value = .stringValue(newValue)}
  }

  var int64Value: Int64 {
    get {
      if case .int64Value(let v)? = _storage._value {return v}
      return 0
    }
    set {_uniqueStorage()._value = .int64Value(newValue)}
  }

  var arrayValue: Protobuf_ListValue {
    get {
      if case .arrayValue(let v)? = _storage._value {return v}
      return Protobuf_ListValue()
    }
    set {_uniqueStorage()._value = .arrayValue(newValue)}
  }

  var dictionaryValue: Protobuf_MapValue {
    get {
      if case .dictionaryValue(let v)? = _storage._value {return v}
      return Protobuf_MapValue()
    }
    set {_uniqueStorage()._value = .dictionaryValue(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case floatValue(Float)
    case boolValue(Bool)
    case stringValue(String)
    case int64Value(Int64)
    case arrayValue(Protobuf_ListValue)
    case dictionaryValue(Protobuf_MapValue)

    static func ==(lhs: Protobuf_TypedCodableValue.OneOf_Value, rhs: Protobuf_TypedCodableValue.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.floatValue(let l), .floatValue(let r)): return l == r
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.int64Value(let l), .int64Value(let r)): return l == r
      case (.arrayValue(let l), .arrayValue(let r)): return l == r
      case (.dictionaryValue(let l), .dictionaryValue(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Float?
          try decoder.decodeSingularFloatField(value: &v)
          if let v = v {_storage._value = .floatValue(v)}
        case 2:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._value = .boolValue(v)}
        case 3:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._value = .stringValue(v)}
        case 4:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._value = .int64Value(v)}
        case 5:
          var v: Protobuf_ListValue?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .arrayValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .arrayValue(v)}
        case 6:
          var v: Protobuf_MapValue?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .dictionaryValue(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .dictionaryValue(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .floatValue(let v)?:
        try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
      case .boolValue(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      case .stringValue(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case .int64Value(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      case .arrayValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .dictionaryValue(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// `ListValue` is a wrapper around a repeated field of values.
struct Protobuf_ListValue: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ListValue"

  /// Repeated field of dynamically typed values.
  var values: [Protobuf_TypedCodableValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_MapValue: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MapValue"

  var mapValue: Dictionary<String,Protobuf_TypedCodableValue> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &self.mapValue)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mapValue.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: self.mapValue, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_BytesRange: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".BytesRange"

  var offset: Int64 = 0

  var length: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.offset)
      case 2: try decoder.decodeSingularInt64Field(value: &self.length)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.offset != 0 {
      try visitor.visitSingularInt64Field(value: self.offset, fieldNumber: 1)
    }
    if self.length != 0 {
      try visitor.visitSingularInt64Field(value: self.length, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_Structure: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Structure"

  var dictionary: Protobuf_MapValue {
    get {return _storage._dictionary ?? Protobuf_MapValue()}
    set {_uniqueStorage()._dictionary = newValue}
  }
  /// Returns true if `dictionary` has been explicitly set.
  var hasDictionary: Bool {return _storage._dictionary != nil}
  /// Clears the value of `dictionary`. Subsequent reads from it will return its default value.
  mutating func clearDictionary() {_storage._dictionary = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._dictionary)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._dictionary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_GenericTypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GenericTypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_GenericType {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_GenericType()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_GenericType)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_GenericTypeWrapper.OneOf_Value, rhs: Protobuf_GenericTypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_GenericType?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TypeNameWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypeNameWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_TypeName {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_TypeName()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_TypeName)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_TypeNameWrapper.OneOf_Value, rhs: Protobuf_TypeNameWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_TypeName?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_Type {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_Type()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_Type)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_TypeWrapper.OneOf_Value, rhs: Protobuf_TypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_Type?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TupleTypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TupleTypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_TupleType {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_TupleType()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_TupleType)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_TupleTypeWrapper.OneOf_Value, rhs: Protobuf_TupleTypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_TupleType?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_ArrayTypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ArrayTypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_ArrayType {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_ArrayType()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_ArrayType)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_ArrayTypeWrapper.OneOf_Value, rhs: Protobuf_ArrayTypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_ArrayType?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_DictionaryTypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DictionaryTypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_DictionaryType {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_DictionaryType()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_DictionaryType)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_DictionaryTypeWrapper.OneOf_Value, rhs: Protobuf_DictionaryTypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_DictionaryType?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_ClosureTypeWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ClosureTypeWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_ClosureType {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_ClosureType()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_ClosureType)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_ClosureTypeWrapper.OneOf_Value, rhs: Protobuf_ClosureTypeWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_ClosureType?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_StringWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".StringWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: String {
    get {
      if case .some(let v)? = _storage._value {return v}
      return String()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(String)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_StringWrapper.OneOf_Value, rhs: Protobuf_StringWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          if _storage._value != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_StructureWrapper: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".StructureWrapper"

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var some: Protobuf_Structure {
    get {
      if case .some(let v)? = _storage._value {return v}
      return Protobuf_Structure()
    }
    set {_uniqueStorage()._value = .some(newValue)}
  }

  var none: Protobuf_Null {
    get {
      if case .none(let v)? = _storage._value {return v}
      return Protobuf_Null()
    }
    set {_uniqueStorage()._value = .none(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case some(Protobuf_Structure)
    case none(Protobuf_Null)

    static func ==(lhs: Protobuf_StructureWrapper.OneOf_Value, rhs: Protobuf_StructureWrapper.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.some(let l), .some(let r)): return l == r
      case (.none(let l), .none(let r)): return l == r
      default: return false
      }
    }
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2:
          var v: Protobuf_Structure?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .some(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .some(v)}
        case 3:
          var v: Protobuf_Null?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .none(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .none(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .some(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .none(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Type: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Type"

  var module: String {
    get {return _storage._module}
    set {_uniqueStorage()._module = newValue}
  }

  var typealiases: Dictionary<String,Protobuf_Typealias> {
    get {return _storage._typealiases}
    set {_uniqueStorage()._typealiases = newValue}
  }

  var isExtension: Bool {
    get {return _storage._isExtension}
    set {_uniqueStorage()._isExtension = newValue}
  }

  var accessLevel: String {
    get {return _storage._accessLevel}
    set {_uniqueStorage()._accessLevel = newValue}
  }

  var filePath: String {
    get {return _storage._filePath}
    set {_uniqueStorage()._filePath = newValue}
  }

  var isGeneric: Bool {
    get {return _storage._isGeneric}
    set {_uniqueStorage()._isGeneric = newValue}
  }

  var genericTypeParameters: [Protobuf_GenericTypeParameter] {
    get {return _storage._genericTypeParameters}
    set {_uniqueStorage()._genericTypeParameters = newValue}
  }

  var localName: String {
    get {return _storage._localName}
    set {_uniqueStorage()._localName = newValue}
  }

  var variables: [Protobuf_Variable] {
    get {return _storage._variables}
    set {_uniqueStorage()._variables = newValue}
  }

  var methods: [Protobuf_Method] {
    get {return _storage._methods}
    set {_uniqueStorage()._methods = newValue}
  }

  var subscripts: [Protobuf_Subscript] {
    get {return _storage._subscripts}
    set {_uniqueStorage()._subscripts = newValue}
  }

  var bodyBytesRange: Protobuf_BytesRange {
    get {return _storage._bodyBytesRange ?? Protobuf_BytesRange()}
    set {_uniqueStorage()._bodyBytesRange = newValue}
  }
  /// Returns true if `bodyBytesRange` has been explicitly set.
  var hasBodyBytesRange: Bool {return _storage._bodyBytesRange != nil}
  /// Clears the value of `bodyBytesRange`. Subsequent reads from it will return its default value.
  mutating func clearBodyBytesRange() {_storage._bodyBytesRange = nil}

  var annotations: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  var inheritedTypes: [String] {
    get {return _storage._inheritedTypes}
    set {_uniqueStorage()._inheritedTypes = newValue}
  }

  var based: Dictionary<String,String> {
    get {return _storage._based}
    set {_uniqueStorage()._based = newValue}
  }

  var inherits: Protobuf_TypeMap {
    get {return _storage._inherits ?? Protobuf_TypeMap()}
    set {_uniqueStorage()._inherits = newValue}
  }
  /// Returns true if `inherits` has been explicitly set.
  var hasInherits: Bool {return _storage._inherits != nil}
  /// Clears the value of `inherits`. Subsequent reads from it will return its default value.
  mutating func clearInherits() {_storage._inherits = nil}

  var implements: Protobuf_TypeMap {
    get {return _storage._implements ?? Protobuf_TypeMap()}
    set {_uniqueStorage()._implements = newValue}
  }
  /// Returns true if `implements` has been explicitly set.
  var hasImplements: Bool {return _storage._implements != nil}
  /// Clears the value of `implements`. Subsequent reads from it will return its default value.
  mutating func clearImplements() {_storage._implements = nil}

  var containedTypes: Protobuf_TypeList {
    get {return _storage._containedTypes ?? Protobuf_TypeList()}
    set {_uniqueStorage()._containedTypes = newValue}
  }
  /// Returns true if `containedTypes` has been explicitly set.
  var hasContainedTypes: Bool {return _storage._containedTypes != nil}
  /// Clears the value of `containedTypes`. Subsequent reads from it will return its default value.
  mutating func clearContainedTypes() {_storage._containedTypes = nil}

  var containedType: Protobuf_TypeMap {
    get {return _storage._containedType ?? Protobuf_TypeMap()}
    set {_uniqueStorage()._containedType = newValue}
  }
  /// Returns true if `containedType` has been explicitly set.
  var hasContainedType: Bool {return _storage._containedType != nil}
  /// Clears the value of `containedType`. Subsequent reads from it will return its default value.
  mutating func clearContainedType() {_storage._containedType = nil}

  var parentName: String {
    get {return _storage._parentName}
    set {_uniqueStorage()._parentName = newValue}
  }

  var parent: Protobuf_TypeWrapper {
    get {return _storage._parent ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {_storage._parent = nil}

  var supertype: Protobuf_TypeWrapper {
    get {return _storage._supertype ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._supertype = newValue}
  }
  /// Returns true if `supertype` has been explicitly set.
  var hasSupertype: Bool {return _storage._supertype != nil}
  /// Clears the value of `supertype`. Subsequent reads from it will return its default value.
  mutating func clearSupertype() {_storage._supertype = nil}

  var attributes: Dictionary<String,Protobuf_Attribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var _Path: String {
    get {return _storage.__Path}
    set {_uniqueStorage().__Path = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._module)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Typealias>.self, value: &_storage._typealiases)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isExtension)
        case 4: try decoder.decodeSingularStringField(value: &_storage._accessLevel)
        case 5: try decoder.decodeSingularStringField(value: &_storage._filePath)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isGeneric)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._genericTypeParameters)
        case 8: try decoder.decodeSingularStringField(value: &_storage._localName)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._variables)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._methods)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._subscripts)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._bodyBytesRange)
        case 13: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._annotations)
        case 14: try decoder.decodeRepeatedStringField(value: &_storage._inheritedTypes)
        case 15: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &_storage._based)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._inherits)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._implements)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._containedTypes)
        case 19: try decoder.decodeSingularMessageField(value: &_storage._containedType)
        case 20: try decoder.decodeSingularStringField(value: &_storage._parentName)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._parent)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._supertype)
        case 23: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: &_storage._attributes)
        case 24: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        case 25: try decoder.decodeSingularStringField(value: &_storage.__Path)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._module.isEmpty {
        try visitor.visitSingularStringField(value: _storage._module, fieldNumber: 1)
      }
      if !_storage._typealiases.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Typealias>.self, value: _storage._typealiases, fieldNumber: 2)
      }
      if _storage._isExtension != false {
        try visitor.visitSingularBoolField(value: _storage._isExtension, fieldNumber: 3)
      }
      if !_storage._accessLevel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessLevel, fieldNumber: 4)
      }
      if !_storage._filePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._filePath, fieldNumber: 5)
      }
      if _storage._isGeneric != false {
        try visitor.visitSingularBoolField(value: _storage._isGeneric, fieldNumber: 6)
      }
      if !_storage._genericTypeParameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._genericTypeParameters, fieldNumber: 7)
      }
      if !_storage._localName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._localName, fieldNumber: 8)
      }
      if !_storage._variables.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._variables, fieldNumber: 9)
      }
      if !_storage._methods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._methods, fieldNumber: 10)
      }
      if !_storage._subscripts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._subscripts, fieldNumber: 11)
      }
      if let v = _storage._bodyBytesRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._annotations, fieldNumber: 13)
      }
      if !_storage._inheritedTypes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._inheritedTypes, fieldNumber: 14)
      }
      if !_storage._based.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: _storage._based, fieldNumber: 15)
      }
      if let v = _storage._inherits {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._implements {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._containedTypes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if let v = _storage._containedType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      }
      if !_storage._parentName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parentName, fieldNumber: 20)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._supertype {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: _storage._attributes, fieldNumber: 23)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      }
      if !_storage.__Path.isEmpty {
        try visitor.visitSingularStringField(value: _storage.__Path, fieldNumber: 25)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Typealias: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Typealias"

  var aliasName: String {
    get {return _storage._aliasName}
    set {_uniqueStorage()._aliasName = newValue}
  }

  var typeName: Protobuf_TypeName {
    get {return _storage._typeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._typeName = newValue}
  }
  /// Returns true if `typeName` has been explicitly set.
  var hasTypeName: Bool {return _storage._typeName != nil}
  /// Clears the value of `typeName`. Subsequent reads from it will return its default value.
  mutating func clearTypeName() {_storage._typeName = nil}

  var type: Protobuf_TypeWrapper {
    get {return _storage._type ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_storage._type = nil}

  var filePath: String {
    get {return _storage._filePath}
    set {_uniqueStorage()._filePath = newValue}
  }

  var parent: Protobuf_TypeWrapper {
    get {return _storage._parent ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  mutating func clearParent() {_storage._parent = nil}

  var parentName: String {
    get {return _storage._parentName}
    set {_uniqueStorage()._parentName = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._aliasName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._typeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._filePath)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._parent)
        case 6: try decoder.decodeSingularStringField(value: &_storage._parentName)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._aliasName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._aliasName, fieldNumber: 1)
      }
      if let v = _storage._typeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._filePath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._filePath, fieldNumber: 4)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._parentName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parentName, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TypeName: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypeName"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var generic: Protobuf_GenericTypeWrapper {
    get {return _storage._generic ?? Protobuf_GenericTypeWrapper()}
    set {_uniqueStorage()._generic = newValue}
  }
  /// Returns true if `generic` has been explicitly set.
  var hasGeneric: Bool {return _storage._generic != nil}
  /// Clears the value of `generic`. Subsequent reads from it will return its default value.
  mutating func clearGeneric() {_storage._generic = nil}

  var isGeneric: Bool {
    get {return _storage._isGeneric}
    set {_uniqueStorage()._isGeneric = newValue}
  }

  var actualTypeName: Protobuf_TypeNameWrapper {
    get {return _storage._actualTypeName ?? Protobuf_TypeNameWrapper()}
    set {_uniqueStorage()._actualTypeName = newValue}
  }
  /// Returns true if `actualTypeName` has been explicitly set.
  var hasActualTypeName: Bool {return _storage._actualTypeName != nil}
  /// Clears the value of `actualTypeName`. Subsequent reads from it will return its default value.
  mutating func clearActualTypeName() {_storage._actualTypeName = nil}

  var attributes: Dictionary<String,Protobuf_Attribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var isOptional: Bool {
    get {return _storage._isOptional}
    set {_uniqueStorage()._isOptional = newValue}
  }

  var isImplicitlyUnwrappedOptional: Bool {
    get {return _storage._isImplicitlyUnwrappedOptional}
    set {_uniqueStorage()._isImplicitlyUnwrappedOptional = newValue}
  }

  var unwrappedTypeName: String {
    get {return _storage._unwrappedTypeName}
    set {_uniqueStorage()._unwrappedTypeName = newValue}
  }

  var tuple: Protobuf_TupleTypeWrapper {
    get {return _storage._tuple ?? Protobuf_TupleTypeWrapper()}
    set {_uniqueStorage()._tuple = newValue}
  }
  /// Returns true if `tuple` has been explicitly set.
  var hasTuple: Bool {return _storage._tuple != nil}
  /// Clears the value of `tuple`. Subsequent reads from it will return its default value.
  mutating func clearTuple() {_storage._tuple = nil}

  var array: Protobuf_ArrayTypeWrapper {
    get {return _storage._array ?? Protobuf_ArrayTypeWrapper()}
    set {_uniqueStorage()._array = newValue}
  }
  /// Returns true if `array` has been explicitly set.
  var hasArray: Bool {return _storage._array != nil}
  /// Clears the value of `array`. Subsequent reads from it will return its default value.
  mutating func clearArray() {_storage._array = nil}

  var dictionary: Protobuf_DictionaryTypeWrapper {
    get {return _storage._dictionary ?? Protobuf_DictionaryTypeWrapper()}
    set {_uniqueStorage()._dictionary = newValue}
  }
  /// Returns true if `dictionary` has been explicitly set.
  var hasDictionary: Bool {return _storage._dictionary != nil}
  /// Clears the value of `dictionary`. Subsequent reads from it will return its default value.
  mutating func clearDictionary() {_storage._dictionary = nil}

  var closure: Protobuf_ClosureTypeWrapper {
    get {return _storage._closure ?? Protobuf_ClosureTypeWrapper()}
    set {_uniqueStorage()._closure = newValue}
  }
  /// Returns true if `closure` has been explicitly set.
  var hasClosure: Bool {return _storage._closure != nil}
  /// Clears the value of `closure`. Subsequent reads from it will return its default value.
  mutating func clearClosure() {_storage._closure = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._generic)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._isGeneric)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._actualTypeName)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: &_storage._attributes)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isOptional)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._isImplicitlyUnwrappedOptional)
        case 8: try decoder.decodeSingularStringField(value: &_storage._unwrappedTypeName)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._tuple)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._array)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._dictionary)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._closure)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._generic {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._isGeneric != false {
        try visitor.visitSingularBoolField(value: _storage._isGeneric, fieldNumber: 3)
      }
      if let v = _storage._actualTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: _storage._attributes, fieldNumber: 5)
      }
      if _storage._isOptional != false {
        try visitor.visitSingularBoolField(value: _storage._isOptional, fieldNumber: 6)
      }
      if _storage._isImplicitlyUnwrappedOptional != false {
        try visitor.visitSingularBoolField(value: _storage._isImplicitlyUnwrappedOptional, fieldNumber: 7)
      }
      if !_storage._unwrappedTypeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._unwrappedTypeName, fieldNumber: 8)
      }
      if let v = _storage._tuple {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._array {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._dictionary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._closure {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TupleType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TupleType"

  var name: String = String()

  var elements: [Protobuf_TupleElement] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.elements)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.elements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.elements, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_TupleElement: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TupleElement"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var typeName: Protobuf_TypeName {
    get {return _storage._typeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._typeName = newValue}
  }
  /// Returns true if `typeName` has been explicitly set.
  var hasTypeName: Bool {return _storage._typeName != nil}
  /// Clears the value of `typeName`. Subsequent reads from it will return its default value.
  mutating func clearTypeName() {_storage._typeName = nil}

  var type: Protobuf_TypeWrapper {
    get {return _storage._type ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_storage._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._typeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._typeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_ArrayType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ArrayType"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var elementTypeName: Protobuf_TypeName {
    get {return _storage._elementTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._elementTypeName = newValue}
  }
  /// Returns true if `elementTypeName` has been explicitly set.
  var hasElementTypeName: Bool {return _storage._elementTypeName != nil}
  /// Clears the value of `elementTypeName`. Subsequent reads from it will return its default value.
  mutating func clearElementTypeName() {_storage._elementTypeName = nil}

  var elementType: Protobuf_TypeWrapper {
    get {return _storage._elementType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._elementType = newValue}
  }
  /// Returns true if `elementType` has been explicitly set.
  var hasElementType: Bool {return _storage._elementType != nil}
  /// Clears the value of `elementType`. Subsequent reads from it will return its default value.
  mutating func clearElementType() {_storage._elementType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._elementTypeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._elementType)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._elementTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._elementType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_DictionaryType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DictionaryType"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var valueTypeName: Protobuf_TypeName {
    get {return _storage._valueTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._valueTypeName = newValue}
  }
  /// Returns true if `valueTypeName` has been explicitly set.
  var hasValueTypeName: Bool {return _storage._valueTypeName != nil}
  /// Clears the value of `valueTypeName`. Subsequent reads from it will return its default value.
  mutating func clearValueTypeName() {_storage._valueTypeName = nil}

  var valueType: Protobuf_TypeWrapper {
    get {return _storage._valueType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._valueType = newValue}
  }
  /// Returns true if `valueType` has been explicitly set.
  var hasValueType: Bool {return _storage._valueType != nil}
  /// Clears the value of `valueType`. Subsequent reads from it will return its default value.
  mutating func clearValueType() {_storage._valueType = nil}

  var keyTypeName: Protobuf_TypeName {
    get {return _storage._keyTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._keyTypeName = newValue}
  }
  /// Returns true if `keyTypeName` has been explicitly set.
  var hasKeyTypeName: Bool {return _storage._keyTypeName != nil}
  /// Clears the value of `keyTypeName`. Subsequent reads from it will return its default value.
  mutating func clearKeyTypeName() {_storage._keyTypeName = nil}

  var keyType: Protobuf_TypeWrapper {
    get {return _storage._keyType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._keyType = newValue}
  }
  /// Returns true if `keyType` has been explicitly set.
  var hasKeyType: Bool {return _storage._keyType != nil}
  /// Clears the value of `keyType`. Subsequent reads from it will return its default value.
  mutating func clearKeyType() {_storage._keyType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._valueTypeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._valueType)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._keyTypeName)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._keyType)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._valueTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._valueType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._keyTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._keyType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_ClosureType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ClosureType"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var parameters: [Protobuf_MethodParameter] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  var returnTypeName: Protobuf_TypeName {
    get {return _storage._returnTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._returnTypeName = newValue}
  }
  /// Returns true if `returnTypeName` has been explicitly set.
  var hasReturnTypeName: Bool {return _storage._returnTypeName != nil}
  /// Clears the value of `returnTypeName`. Subsequent reads from it will return its default value.
  mutating func clearReturnTypeName() {_storage._returnTypeName = nil}

  var returnType: Protobuf_TypeWrapper {
    get {return _storage._returnType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._returnType = newValue}
  }
  /// Returns true if `returnType` has been explicitly set.
  var hasReturnType: Bool {return _storage._returnType != nil}
  /// Clears the value of `returnType`. Subsequent reads from it will return its default value.
  mutating func clearReturnType() {_storage._returnType = nil}

  var `throws`: Bool {
    get {return _storage._throws}
    set {_uniqueStorage()._throws = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._parameters)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._returnTypeName)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._returnType)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._throws)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 2)
      }
      if let v = _storage._returnTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._returnType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._throws != false {
        try visitor.visitSingularBoolField(value: _storage._throws, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_MethodParameter: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MethodParameter"

  var argumentLabel: Protobuf_StringWrapper {
    get {return _storage._argumentLabel ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._argumentLabel = newValue}
  }
  /// Returns true if `argumentLabel` has been explicitly set.
  var hasArgumentLabel: Bool {return _storage._argumentLabel != nil}
  /// Clears the value of `argumentLabel`. Subsequent reads from it will return its default value.
  mutating func clearArgumentLabel() {_storage._argumentLabel = nil}

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var typeName: Protobuf_TypeName {
    get {return _storage._typeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._typeName = newValue}
  }
  /// Returns true if `typeName` has been explicitly set.
  var hasTypeName: Bool {return _storage._typeName != nil}
  /// Clears the value of `typeName`. Subsequent reads from it will return its default value.
  mutating func clearTypeName() {_storage._typeName = nil}

  var `inout`: Bool {
    get {return _storage._inout}
    set {_uniqueStorage()._inout = newValue}
  }

  var type: Protobuf_TypeWrapper {
    get {return _storage._type ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_storage._type = nil}

  var defaultValue: Protobuf_StringWrapper {
    get {return _storage._defaultValue ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._defaultValue = newValue}
  }
  /// Returns true if `defaultValue` has been explicitly set.
  var hasDefaultValue: Bool {return _storage._defaultValue != nil}
  /// Clears the value of `defaultValue`. Subsequent reads from it will return its default value.
  mutating func clearDefaultValue() {_storage._defaultValue = nil}

  var annotations: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._argumentLabel)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._typeName)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._inout)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._defaultValue)
        case 7: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._annotations)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._argumentLabel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if let v = _storage._typeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._inout != false {
        try visitor.visitSingularBoolField(value: _storage._inout, fieldNumber: 4)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._defaultValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._annotations, fieldNumber: 7)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_GenericType: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GenericType"

  var name: String = String()

  var typeParameters: [Protobuf_GenericTypeParameter] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.typeParameters)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.typeParameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.typeParameters, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_GenericTypeParameter: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".GenericTypeParameter"

  var typeName: Protobuf_TypeName {
    get {return _storage._typeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._typeName = newValue}
  }
  /// Returns true if `typeName` has been explicitly set.
  var hasTypeName: Bool {return _storage._typeName != nil}
  /// Clears the value of `typeName`. Subsequent reads from it will return its default value.
  mutating func clearTypeName() {_storage._typeName = nil}

  var type: Protobuf_TypeWrapper {
    get {return _storage._type ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_storage._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._typeName)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._typeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Variable: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Variable"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var typeName: Protobuf_TypeName {
    get {return _storage._typeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._typeName = newValue}
  }
  /// Returns true if `typeName` has been explicitly set.
  var hasTypeName: Bool {return _storage._typeName != nil}
  /// Clears the value of `typeName`. Subsequent reads from it will return its default value.
  mutating func clearTypeName() {_storage._typeName = nil}

  var type: Protobuf_TypeWrapper {
    get {return _storage._type ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_storage._type = nil}

  var isComputed: Bool {
    get {return _storage._isComputed}
    set {_uniqueStorage()._isComputed = newValue}
  }

  var isStatic: Bool {
    get {return _storage._isStatic}
    set {_uniqueStorage()._isStatic = newValue}
  }

  var readAccess: String {
    get {return _storage._readAccess}
    set {_uniqueStorage()._readAccess = newValue}
  }

  var writeAccess: String {
    get {return _storage._writeAccess}
    set {_uniqueStorage()._writeAccess = newValue}
  }

  var defaultValue: Protobuf_StringWrapper {
    get {return _storage._defaultValue ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._defaultValue = newValue}
  }
  /// Returns true if `defaultValue` has been explicitly set.
  var hasDefaultValue: Bool {return _storage._defaultValue != nil}
  /// Clears the value of `defaultValue`. Subsequent reads from it will return its default value.
  mutating func clearDefaultValue() {_storage._defaultValue = nil}

  var annotations: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  var attributes: Dictionary<String,Protobuf_Attribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var definedInTypeName: Protobuf_TypeNameWrapper {
    get {return _storage._definedInTypeName ?? Protobuf_TypeNameWrapper()}
    set {_uniqueStorage()._definedInTypeName = newValue}
  }
  /// Returns true if `definedInTypeName` has been explicitly set.
  var hasDefinedInTypeName: Bool {return _storage._definedInTypeName != nil}
  /// Clears the value of `definedInTypeName`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInTypeName() {_storage._definedInTypeName = nil}

  var definedInType: Protobuf_TypeWrapper {
    get {return _storage._definedInType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._definedInType = newValue}
  }
  /// Returns true if `definedInType` has been explicitly set.
  var hasDefinedInType: Bool {return _storage._definedInType != nil}
  /// Clears the value of `definedInType`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInType() {_storage._definedInType = nil}

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._typeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isComputed)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._isStatic)
        case 6: try decoder.decodeSingularStringField(value: &_storage._readAccess)
        case 7: try decoder.decodeSingularStringField(value: &_storage._writeAccess)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._defaultValue)
        case 9: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._annotations)
        case 10: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: &_storage._attributes)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._definedInTypeName)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._definedInType)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._typeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._isComputed != false {
        try visitor.visitSingularBoolField(value: _storage._isComputed, fieldNumber: 4)
      }
      if _storage._isStatic != false {
        try visitor.visitSingularBoolField(value: _storage._isStatic, fieldNumber: 5)
      }
      if !_storage._readAccess.isEmpty {
        try visitor.visitSingularStringField(value: _storage._readAccess, fieldNumber: 6)
      }
      if !_storage._writeAccess.isEmpty {
        try visitor.visitSingularStringField(value: _storage._writeAccess, fieldNumber: 7)
      }
      if let v = _storage._defaultValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._annotations, fieldNumber: 9)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: _storage._attributes, fieldNumber: 10)
      }
      if let v = _storage._definedInTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._definedInType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Method: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Method"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var selectorName: String {
    get {return _storage._selectorName}
    set {_uniqueStorage()._selectorName = newValue}
  }

  var parameters: [Protobuf_MethodParameter] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  var returnTypeName: Protobuf_TypeName {
    get {return _storage._returnTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._returnTypeName = newValue}
  }
  /// Returns true if `returnTypeName` has been explicitly set.
  var hasReturnTypeName: Bool {return _storage._returnTypeName != nil}
  /// Clears the value of `returnTypeName`. Subsequent reads from it will return its default value.
  mutating func clearReturnTypeName() {_storage._returnTypeName = nil}

  var returnType: Protobuf_TypeWrapper {
    get {return _storage._returnType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._returnType = newValue}
  }
  /// Returns true if `returnType` has been explicitly set.
  var hasReturnType: Bool {return _storage._returnType != nil}
  /// Clears the value of `returnType`. Subsequent reads from it will return its default value.
  mutating func clearReturnType() {_storage._returnType = nil}

  var `throws`: Bool {
    get {return _storage._throws}
    set {_uniqueStorage()._throws = newValue}
  }

  var `rethrows`: Bool {
    get {return _storage._rethrows}
    set {_uniqueStorage()._rethrows = newValue}
  }

  var accessLevel: String {
    get {return _storage._accessLevel}
    set {_uniqueStorage()._accessLevel = newValue}
  }

  var isStatic: Bool {
    get {return _storage._isStatic}
    set {_uniqueStorage()._isStatic = newValue}
  }

  var isClass: Bool {
    get {return _storage._isClass}
    set {_uniqueStorage()._isClass = newValue}
  }

  var isFailableInitializer: Bool {
    get {return _storage._isFailableInitializer}
    set {_uniqueStorage()._isFailableInitializer = newValue}
  }

  var annotations: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  var definedInTypeName: Protobuf_TypeNameWrapper {
    get {return _storage._definedInTypeName ?? Protobuf_TypeNameWrapper()}
    set {_uniqueStorage()._definedInTypeName = newValue}
  }
  /// Returns true if `definedInTypeName` has been explicitly set.
  var hasDefinedInTypeName: Bool {return _storage._definedInTypeName != nil}
  /// Clears the value of `definedInTypeName`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInTypeName() {_storage._definedInTypeName = nil}

  var definedInType: Protobuf_TypeWrapper {
    get {return _storage._definedInType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._definedInType = newValue}
  }
  /// Returns true if `definedInType` has been explicitly set.
  var hasDefinedInType: Bool {return _storage._definedInType != nil}
  /// Clears the value of `definedInType`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInType() {_storage._definedInType = nil}

  var attributes: Dictionary<String,Protobuf_Attribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularStringField(value: &_storage._selectorName)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._parameters)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._returnTypeName)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._returnType)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._throws)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._rethrows)
        case 8: try decoder.decodeSingularStringField(value: &_storage._accessLevel)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._isStatic)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._isClass)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._isFailableInitializer)
        case 12: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._annotations)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._definedInTypeName)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._definedInType)
        case 15: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: &_storage._attributes)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._selectorName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._selectorName, fieldNumber: 2)
      }
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 3)
      }
      if let v = _storage._returnTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._returnType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._throws != false {
        try visitor.visitSingularBoolField(value: _storage._throws, fieldNumber: 6)
      }
      if _storage._rethrows != false {
        try visitor.visitSingularBoolField(value: _storage._rethrows, fieldNumber: 7)
      }
      if !_storage._accessLevel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessLevel, fieldNumber: 8)
      }
      if _storage._isStatic != false {
        try visitor.visitSingularBoolField(value: _storage._isStatic, fieldNumber: 9)
      }
      if _storage._isClass != false {
        try visitor.visitSingularBoolField(value: _storage._isClass, fieldNumber: 10)
      }
      if _storage._isFailableInitializer != false {
        try visitor.visitSingularBoolField(value: _storage._isFailableInitializer, fieldNumber: 11)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._annotations, fieldNumber: 12)
      }
      if let v = _storage._definedInTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._definedInType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: _storage._attributes, fieldNumber: 15)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Subscript: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Subscript"

  var parameters: [Protobuf_MethodParameter] {
    get {return _storage._parameters}
    set {_uniqueStorage()._parameters = newValue}
  }

  var returnTypeName: Protobuf_TypeName {
    get {return _storage._returnTypeName ?? Protobuf_TypeName()}
    set {_uniqueStorage()._returnTypeName = newValue}
  }
  /// Returns true if `returnTypeName` has been explicitly set.
  var hasReturnTypeName: Bool {return _storage._returnTypeName != nil}
  /// Clears the value of `returnTypeName`. Subsequent reads from it will return its default value.
  mutating func clearReturnTypeName() {_storage._returnTypeName = nil}

  var returnType: Protobuf_TypeWrapper {
    get {return _storage._returnType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._returnType = newValue}
  }
  /// Returns true if `returnType` has been explicitly set.
  var hasReturnType: Bool {return _storage._returnType != nil}
  /// Clears the value of `returnType`. Subsequent reads from it will return its default value.
  mutating func clearReturnType() {_storage._returnType = nil}

  var readAccess: String {
    get {return _storage._readAccess}
    set {_uniqueStorage()._readAccess = newValue}
  }

  var writeAccess: String {
    get {return _storage._writeAccess}
    set {_uniqueStorage()._writeAccess = newValue}
  }

  var annotations: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._annotations}
    set {_uniqueStorage()._annotations = newValue}
  }

  var definedInTypeName: Protobuf_TypeNameWrapper {
    get {return _storage._definedInTypeName ?? Protobuf_TypeNameWrapper()}
    set {_uniqueStorage()._definedInTypeName = newValue}
  }
  /// Returns true if `definedInTypeName` has been explicitly set.
  var hasDefinedInTypeName: Bool {return _storage._definedInTypeName != nil}
  /// Clears the value of `definedInTypeName`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInTypeName() {_storage._definedInTypeName = nil}

  var definedInType: Protobuf_TypeWrapper {
    get {return _storage._definedInType ?? Protobuf_TypeWrapper()}
    set {_uniqueStorage()._definedInType = newValue}
  }
  /// Returns true if `definedInType` has been explicitly set.
  var hasDefinedInType: Bool {return _storage._definedInType != nil}
  /// Clears the value of `definedInType`. Subsequent reads from it will return its default value.
  mutating func clearDefinedInType() {_storage._definedInType = nil}

  var attributes: Dictionary<String,Protobuf_Attribute> {
    get {return _storage._attributes}
    set {_uniqueStorage()._attributes = newValue}
  }

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._parameters)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._returnTypeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._returnType)
        case 4: try decoder.decodeSingularStringField(value: &_storage._readAccess)
        case 5: try decoder.decodeSingularStringField(value: &_storage._writeAccess)
        case 6: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._annotations)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._definedInTypeName)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._definedInType)
        case 9: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: &_storage._attributes)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._parameters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._parameters, fieldNumber: 1)
      }
      if let v = _storage._returnTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._returnType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._readAccess.isEmpty {
        try visitor.visitSingularStringField(value: _storage._readAccess, fieldNumber: 4)
      }
      if !_storage._writeAccess.isEmpty {
        try visitor.visitSingularStringField(value: _storage._writeAccess, fieldNumber: 5)
      }
      if !_storage._annotations.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._annotations, fieldNumber: 6)
      }
      if let v = _storage._definedInTypeName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._definedInType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._attributes.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Attribute>.self, value: _storage._attributes, fieldNumber: 9)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_TypeList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypeList"

  var value: [Protobuf_Type] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_TypeMap: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TypeMap"

  var value: Dictionary<String,Protobuf_Type> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Type>.self, value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_Type>.self, value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_Null: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Null"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_Attribute: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Attribute"

  var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  var arguments: Dictionary<String,Protobuf_TypedCodableValue> {
    get {return _storage._arguments}
    set {_uniqueStorage()._arguments = newValue}
  }

  var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  var parserData: Protobuf_StructureWrapper {
    get {return _storage._parserData ?? Protobuf_StructureWrapper()}
    set {_uniqueStorage()._parserData = newValue}
  }
  /// Returns true if `parserData` has been explicitly set.
  var hasParserData: Bool {return _storage._parserData != nil}
  /// Clears the value of `parserData`. Subsequent reads from it will return its default value.
  mutating func clearParserData() {_storage._parserData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: &_storage._arguments)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._parserData)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._arguments.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_TypedCodableValue>.self, value: _storage._arguments, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if let v = _storage._parserData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_Range: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Range"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Protobuf_FileParserResult: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FileParserResult"

  var path: Protobuf_StringWrapper {
    get {return _storage._path ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  var hasPath: Bool {return _storage._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  mutating func clearPath() {_storage._path = nil}

  var module: Protobuf_StringWrapper {
    get {return _storage._module ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._module = newValue}
  }
  /// Returns true if `module` has been explicitly set.
  var hasModule: Bool {return _storage._module != nil}
  /// Clears the value of `module`. Subsequent reads from it will return its default value.
  mutating func clearModule() {_storage._module = nil}

  var types: [Protobuf_Type] {
    get {return _storage._types}
    set {_uniqueStorage()._types = newValue}
  }

  var typealiases: [Protobuf_Typealias] {
    get {return _storage._typealiases}
    set {_uniqueStorage()._typealiases = newValue}
  }

  var inlineRanges: Dictionary<String,Protobuf_BytesRange> {
    get {return _storage._inlineRanges}
    set {_uniqueStorage()._inlineRanges = newValue}
  }

  var contentSha: Protobuf_StringWrapper {
    get {return _storage._contentSha ?? Protobuf_StringWrapper()}
    set {_uniqueStorage()._contentSha = newValue}
  }
  /// Returns true if `contentSha` has been explicitly set.
  var hasContentSha: Bool {return _storage._contentSha != nil}
  /// Clears the value of `contentSha`. Subsequent reads from it will return its default value.
  mutating func clearContentSha() {_storage._contentSha = nil}

  var linterVersion: String {
    get {return _storage._linterVersion}
    set {_uniqueStorage()._linterVersion = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._path)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._module)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._types)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._typealiases)
        case 5: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_BytesRange>.self, value: &_storage._inlineRanges)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._contentSha)
        case 7: try decoder.decodeSingularStringField(value: &_storage._linterVersion)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._path {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._module {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._types.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._types, fieldNumber: 3)
      }
      if !_storage._typealiases.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._typealiases, fieldNumber: 4)
      }
      if !_storage._inlineRanges.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Protobuf_BytesRange>.self, value: _storage._inlineRanges, fieldNumber: 5)
      }
      if let v = _storage._contentSha {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._linterVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linterVersion, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Protobuf_FileParserResultList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FileParserResultList"

  var value: [Protobuf_FileParserResult] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.value)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "protobuf"

extension Protobuf_AccessLevel: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "internal"),
    1: .same(proto: "private"),
    2: .same(proto: "fileprivate"),
    3: .same(proto: "public"),
    4: .same(proto: "open"),
  ]
}

extension Protobuf_TypedCodableValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "floatValue"),
    2: .same(proto: "boolValue"),
    3: .same(proto: "stringValue"),
    4: .same(proto: "int64Value"),
    5: .same(proto: "arrayValue"),
    6: .same(proto: "dictionaryValue"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_TypedCodableValue.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TypedCodableValue) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_ListValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "values"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_ListValue) -> Bool {
    if self.values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_MapValue: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mapValue"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_MapValue) -> Bool {
    if self.mapValue != other.mapValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_BytesRange: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "offset"),
    2: .same(proto: "length"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_BytesRange) -> Bool {
    if self.offset != other.offset {return false}
    if self.length != other.length {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Structure: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "dictionary"),
  ]

  fileprivate class _StorageClass {
    var _dictionary: Protobuf_MapValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _dictionary = source._dictionary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Structure) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._dictionary != other_storage._dictionary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_GenericTypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_GenericTypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_GenericTypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TypeNameWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_TypeNameWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TypeNameWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_TypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TupleTypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_TupleTypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TupleTypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_ArrayTypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_ArrayTypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_ArrayTypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_DictionaryTypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_DictionaryTypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_DictionaryTypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_ClosureTypeWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_ClosureTypeWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_ClosureTypeWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_StringWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_StringWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_StringWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_StructureWrapper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "some"),
    3: .same(proto: "none"),
  ]

  fileprivate class _StorageClass {
    var _value: Protobuf_StructureWrapper.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_StructureWrapper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Type: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
    2: .same(proto: "typealiases"),
    3: .same(proto: "isExtension"),
    4: .same(proto: "accessLevel"),
    5: .same(proto: "filePath"),
    6: .same(proto: "isGeneric"),
    7: .same(proto: "genericTypeParameters"),
    8: .same(proto: "localName"),
    9: .same(proto: "variables"),
    10: .same(proto: "methods"),
    11: .same(proto: "subscripts"),
    12: .same(proto: "bodyBytesRange"),
    13: .same(proto: "annotations"),
    14: .same(proto: "inheritedTypes"),
    15: .same(proto: "based"),
    16: .same(proto: "inherits"),
    17: .same(proto: "implements"),
    18: .same(proto: "containedTypes"),
    19: .same(proto: "containedType"),
    20: .same(proto: "parentName"),
    21: .same(proto: "parent"),
    22: .same(proto: "supertype"),
    23: .same(proto: "attributes"),
    24: .same(proto: "parserData"),
    25: .standard(proto: "__path"),
  ]

  fileprivate class _StorageClass {
    var _module: String = String()
    var _typealiases: Dictionary<String,Protobuf_Typealias> = [:]
    var _isExtension: Bool = false
    var _accessLevel: String = String()
    var _filePath: String = String()
    var _isGeneric: Bool = false
    var _genericTypeParameters: [Protobuf_GenericTypeParameter] = []
    var _localName: String = String()
    var _variables: [Protobuf_Variable] = []
    var _methods: [Protobuf_Method] = []
    var _subscripts: [Protobuf_Subscript] = []
    var _bodyBytesRange: Protobuf_BytesRange? = nil
    var _annotations: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _inheritedTypes: [String] = []
    var _based: Dictionary<String,String> = [:]
    var _inherits: Protobuf_TypeMap? = nil
    var _implements: Protobuf_TypeMap? = nil
    var _containedTypes: Protobuf_TypeList? = nil
    var _containedType: Protobuf_TypeMap? = nil
    var _parentName: String = String()
    var _parent: Protobuf_TypeWrapper? = nil
    var _supertype: Protobuf_TypeWrapper? = nil
    var _attributes: Dictionary<String,Protobuf_Attribute> = [:]
    var _parserData: Protobuf_StructureWrapper? = nil
    var __Path: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _module = source._module
      _typealiases = source._typealiases
      _isExtension = source._isExtension
      _accessLevel = source._accessLevel
      _filePath = source._filePath
      _isGeneric = source._isGeneric
      _genericTypeParameters = source._genericTypeParameters
      _localName = source._localName
      _variables = source._variables
      _methods = source._methods
      _subscripts = source._subscripts
      _bodyBytesRange = source._bodyBytesRange
      _annotations = source._annotations
      _inheritedTypes = source._inheritedTypes
      _based = source._based
      _inherits = source._inherits
      _implements = source._implements
      _containedTypes = source._containedTypes
      _containedType = source._containedType
      _parentName = source._parentName
      _parent = source._parent
      _supertype = source._supertype
      _attributes = source._attributes
      _parserData = source._parserData
      __Path = source.__Path
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Type) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._module != other_storage._module {return false}
        if _storage._typealiases != other_storage._typealiases {return false}
        if _storage._isExtension != other_storage._isExtension {return false}
        if _storage._accessLevel != other_storage._accessLevel {return false}
        if _storage._filePath != other_storage._filePath {return false}
        if _storage._isGeneric != other_storage._isGeneric {return false}
        if _storage._genericTypeParameters != other_storage._genericTypeParameters {return false}
        if _storage._localName != other_storage._localName {return false}
        if _storage._variables != other_storage._variables {return false}
        if _storage._methods != other_storage._methods {return false}
        if _storage._subscripts != other_storage._subscripts {return false}
        if _storage._bodyBytesRange != other_storage._bodyBytesRange {return false}
        if _storage._annotations != other_storage._annotations {return false}
        if _storage._inheritedTypes != other_storage._inheritedTypes {return false}
        if _storage._based != other_storage._based {return false}
        if _storage._inherits != other_storage._inherits {return false}
        if _storage._implements != other_storage._implements {return false}
        if _storage._containedTypes != other_storage._containedTypes {return false}
        if _storage._containedType != other_storage._containedType {return false}
        if _storage._parentName != other_storage._parentName {return false}
        if _storage._parent != other_storage._parent {return false}
        if _storage._supertype != other_storage._supertype {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._parserData != other_storage._parserData {return false}
        if _storage.__Path != other_storage.__Path {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Typealias: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "aliasName"),
    2: .same(proto: "typeName"),
    3: .same(proto: "type"),
    4: .same(proto: "filePath"),
    5: .same(proto: "parent"),
    6: .same(proto: "parentName"),
  ]

  fileprivate class _StorageClass {
    var _aliasName: String = String()
    var _typeName: Protobuf_TypeName? = nil
    var _type: Protobuf_TypeWrapper? = nil
    var _filePath: String = String()
    var _parent: Protobuf_TypeWrapper? = nil
    var _parentName: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _aliasName = source._aliasName
      _typeName = source._typeName
      _type = source._type
      _filePath = source._filePath
      _parent = source._parent
      _parentName = source._parentName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Typealias) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._aliasName != other_storage._aliasName {return false}
        if _storage._typeName != other_storage._typeName {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._filePath != other_storage._filePath {return false}
        if _storage._parent != other_storage._parent {return false}
        if _storage._parentName != other_storage._parentName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TypeName: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "generic"),
    3: .same(proto: "isGeneric"),
    4: .same(proto: "actualTypeName"),
    5: .same(proto: "attributes"),
    6: .same(proto: "isOptional"),
    7: .same(proto: "isImplicitlyUnwrappedOptional"),
    8: .same(proto: "unwrappedTypeName"),
    9: .same(proto: "tuple"),
    10: .same(proto: "array"),
    11: .same(proto: "dictionary"),
    12: .same(proto: "closure"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _generic: Protobuf_GenericTypeWrapper? = nil
    var _isGeneric: Bool = false
    var _actualTypeName: Protobuf_TypeNameWrapper? = nil
    var _attributes: Dictionary<String,Protobuf_Attribute> = [:]
    var _isOptional: Bool = false
    var _isImplicitlyUnwrappedOptional: Bool = false
    var _unwrappedTypeName: String = String()
    var _tuple: Protobuf_TupleTypeWrapper? = nil
    var _array: Protobuf_ArrayTypeWrapper? = nil
    var _dictionary: Protobuf_DictionaryTypeWrapper? = nil
    var _closure: Protobuf_ClosureTypeWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _generic = source._generic
      _isGeneric = source._isGeneric
      _actualTypeName = source._actualTypeName
      _attributes = source._attributes
      _isOptional = source._isOptional
      _isImplicitlyUnwrappedOptional = source._isImplicitlyUnwrappedOptional
      _unwrappedTypeName = source._unwrappedTypeName
      _tuple = source._tuple
      _array = source._array
      _dictionary = source._dictionary
      _closure = source._closure
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TypeName) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._generic != other_storage._generic {return false}
        if _storage._isGeneric != other_storage._isGeneric {return false}
        if _storage._actualTypeName != other_storage._actualTypeName {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._isOptional != other_storage._isOptional {return false}
        if _storage._isImplicitlyUnwrappedOptional != other_storage._isImplicitlyUnwrappedOptional {return false}
        if _storage._unwrappedTypeName != other_storage._unwrappedTypeName {return false}
        if _storage._tuple != other_storage._tuple {return false}
        if _storage._array != other_storage._array {return false}
        if _storage._dictionary != other_storage._dictionary {return false}
        if _storage._closure != other_storage._closure {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TupleType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "elements"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_TupleType) -> Bool {
    if self.name != other.name {return false}
    if self.elements != other.elements {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TupleElement: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "typeName"),
    3: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _typeName: Protobuf_TypeName? = nil
    var _type: Protobuf_TypeWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _typeName = source._typeName
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_TupleElement) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._typeName != other_storage._typeName {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_ArrayType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "elementTypeName"),
    3: .same(proto: "elementType"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _elementTypeName: Protobuf_TypeName? = nil
    var _elementType: Protobuf_TypeWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _elementTypeName = source._elementTypeName
      _elementType = source._elementType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_ArrayType) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._elementTypeName != other_storage._elementTypeName {return false}
        if _storage._elementType != other_storage._elementType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_DictionaryType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "valueTypeName"),
    3: .same(proto: "valueType"),
    4: .same(proto: "keyTypeName"),
    5: .same(proto: "keyType"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _valueTypeName: Protobuf_TypeName? = nil
    var _valueType: Protobuf_TypeWrapper? = nil
    var _keyTypeName: Protobuf_TypeName? = nil
    var _keyType: Protobuf_TypeWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _valueTypeName = source._valueTypeName
      _valueType = source._valueType
      _keyTypeName = source._keyTypeName
      _keyType = source._keyType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_DictionaryType) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._valueTypeName != other_storage._valueTypeName {return false}
        if _storage._valueType != other_storage._valueType {return false}
        if _storage._keyTypeName != other_storage._keyTypeName {return false}
        if _storage._keyType != other_storage._keyType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_ClosureType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "parameters"),
    3: .same(proto: "returnTypeName"),
    4: .same(proto: "returnType"),
    5: .same(proto: "throws"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _parameters: [Protobuf_MethodParameter] = []
    var _returnTypeName: Protobuf_TypeName? = nil
    var _returnType: Protobuf_TypeWrapper? = nil
    var _throws: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _parameters = source._parameters
      _returnTypeName = source._returnTypeName
      _returnType = source._returnType
      _throws = source._throws
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_ClosureType) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._returnTypeName != other_storage._returnTypeName {return false}
        if _storage._returnType != other_storage._returnType {return false}
        if _storage._throws != other_storage._throws {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_MethodParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "argumentLabel"),
    2: .same(proto: "name"),
    3: .same(proto: "typeName"),
    4: .same(proto: "inout"),
    5: .same(proto: "type"),
    6: .same(proto: "defaultValue"),
    7: .same(proto: "annotations"),
    8: .same(proto: "parserData"),
  ]

  fileprivate class _StorageClass {
    var _argumentLabel: Protobuf_StringWrapper? = nil
    var _name: String = String()
    var _typeName: Protobuf_TypeName? = nil
    var _inout: Bool = false
    var _type: Protobuf_TypeWrapper? = nil
    var _defaultValue: Protobuf_StringWrapper? = nil
    var _annotations: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _parserData: Protobuf_StructureWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _argumentLabel = source._argumentLabel
      _name = source._name
      _typeName = source._typeName
      _inout = source._inout
      _type = source._type
      _defaultValue = source._defaultValue
      _annotations = source._annotations
      _parserData = source._parserData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_MethodParameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._argumentLabel != other_storage._argumentLabel {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._typeName != other_storage._typeName {return false}
        if _storage._inout != other_storage._inout {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._defaultValue != other_storage._defaultValue {return false}
        if _storage._annotations != other_storage._annotations {return false}
        if _storage._parserData != other_storage._parserData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_GenericType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "typeParameters"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_GenericType) -> Bool {
    if self.name != other.name {return false}
    if self.typeParameters != other.typeParameters {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_GenericTypeParameter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "typeName"),
    2: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _typeName: Protobuf_TypeName? = nil
    var _type: Protobuf_TypeWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _typeName = source._typeName
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_GenericTypeParameter) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._typeName != other_storage._typeName {return false}
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Variable: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "typeName"),
    3: .same(proto: "type"),
    4: .same(proto: "isComputed"),
    5: .same(proto: "isStatic"),
    6: .same(proto: "readAccess"),
    7: .same(proto: "writeAccess"),
    8: .same(proto: "defaultValue"),
    9: .same(proto: "annotations"),
    10: .same(proto: "attributes"),
    11: .same(proto: "definedInTypeName"),
    12: .same(proto: "definedInType"),
    13: .same(proto: "parserData"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _typeName: Protobuf_TypeName? = nil
    var _type: Protobuf_TypeWrapper? = nil
    var _isComputed: Bool = false
    var _isStatic: Bool = false
    var _readAccess: String = String()
    var _writeAccess: String = String()
    var _defaultValue: Protobuf_StringWrapper? = nil
    var _annotations: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _attributes: Dictionary<String,Protobuf_Attribute> = [:]
    var _definedInTypeName: Protobuf_TypeNameWrapper? = nil
    var _definedInType: Protobuf_TypeWrapper? = nil
    var _parserData: Protobuf_StructureWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _typeName = source._typeName
      _type = source._type
      _isComputed = source._isComputed
      _isStatic = source._isStatic
      _readAccess = source._readAccess
      _writeAccess = source._writeAccess
      _defaultValue = source._defaultValue
      _annotations = source._annotations
      _attributes = source._attributes
      _definedInTypeName = source._definedInTypeName
      _definedInType = source._definedInType
      _parserData = source._parserData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Variable) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._typeName != other_storage._typeName {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._isComputed != other_storage._isComputed {return false}
        if _storage._isStatic != other_storage._isStatic {return false}
        if _storage._readAccess != other_storage._readAccess {return false}
        if _storage._writeAccess != other_storage._writeAccess {return false}
        if _storage._defaultValue != other_storage._defaultValue {return false}
        if _storage._annotations != other_storage._annotations {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._definedInTypeName != other_storage._definedInTypeName {return false}
        if _storage._definedInType != other_storage._definedInType {return false}
        if _storage._parserData != other_storage._parserData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Method: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "selectorName"),
    3: .same(proto: "parameters"),
    4: .same(proto: "returnTypeName"),
    5: .same(proto: "returnType"),
    6: .same(proto: "throws"),
    7: .same(proto: "rethrows"),
    8: .same(proto: "accessLevel"),
    9: .same(proto: "isStatic"),
    10: .same(proto: "isClass"),
    11: .same(proto: "isFailableInitializer"),
    12: .same(proto: "annotations"),
    13: .same(proto: "definedInTypeName"),
    14: .same(proto: "definedInType"),
    15: .same(proto: "attributes"),
    16: .same(proto: "parserData"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _selectorName: String = String()
    var _parameters: [Protobuf_MethodParameter] = []
    var _returnTypeName: Protobuf_TypeName? = nil
    var _returnType: Protobuf_TypeWrapper? = nil
    var _throws: Bool = false
    var _rethrows: Bool = false
    var _accessLevel: String = String()
    var _isStatic: Bool = false
    var _isClass: Bool = false
    var _isFailableInitializer: Bool = false
    var _annotations: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _definedInTypeName: Protobuf_TypeNameWrapper? = nil
    var _definedInType: Protobuf_TypeWrapper? = nil
    var _attributes: Dictionary<String,Protobuf_Attribute> = [:]
    var _parserData: Protobuf_StructureWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _selectorName = source._selectorName
      _parameters = source._parameters
      _returnTypeName = source._returnTypeName
      _returnType = source._returnType
      _throws = source._throws
      _rethrows = source._rethrows
      _accessLevel = source._accessLevel
      _isStatic = source._isStatic
      _isClass = source._isClass
      _isFailableInitializer = source._isFailableInitializer
      _annotations = source._annotations
      _definedInTypeName = source._definedInTypeName
      _definedInType = source._definedInType
      _attributes = source._attributes
      _parserData = source._parserData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Method) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._selectorName != other_storage._selectorName {return false}
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._returnTypeName != other_storage._returnTypeName {return false}
        if _storage._returnType != other_storage._returnType {return false}
        if _storage._throws != other_storage._throws {return false}
        if _storage._rethrows != other_storage._rethrows {return false}
        if _storage._accessLevel != other_storage._accessLevel {return false}
        if _storage._isStatic != other_storage._isStatic {return false}
        if _storage._isClass != other_storage._isClass {return false}
        if _storage._isFailableInitializer != other_storage._isFailableInitializer {return false}
        if _storage._annotations != other_storage._annotations {return false}
        if _storage._definedInTypeName != other_storage._definedInTypeName {return false}
        if _storage._definedInType != other_storage._definedInType {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._parserData != other_storage._parserData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Subscript: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameters"),
    2: .same(proto: "returnTypeName"),
    3: .same(proto: "returnType"),
    4: .same(proto: "readAccess"),
    5: .same(proto: "writeAccess"),
    6: .same(proto: "annotations"),
    7: .same(proto: "definedInTypeName"),
    8: .same(proto: "definedInType"),
    9: .same(proto: "attributes"),
    10: .same(proto: "parserData"),
  ]

  fileprivate class _StorageClass {
    var _parameters: [Protobuf_MethodParameter] = []
    var _returnTypeName: Protobuf_TypeName? = nil
    var _returnType: Protobuf_TypeWrapper? = nil
    var _readAccess: String = String()
    var _writeAccess: String = String()
    var _annotations: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _definedInTypeName: Protobuf_TypeNameWrapper? = nil
    var _definedInType: Protobuf_TypeWrapper? = nil
    var _attributes: Dictionary<String,Protobuf_Attribute> = [:]
    var _parserData: Protobuf_StructureWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _parameters = source._parameters
      _returnTypeName = source._returnTypeName
      _returnType = source._returnType
      _readAccess = source._readAccess
      _writeAccess = source._writeAccess
      _annotations = source._annotations
      _definedInTypeName = source._definedInTypeName
      _definedInType = source._definedInType
      _attributes = source._attributes
      _parserData = source._parserData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Subscript) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._parameters != other_storage._parameters {return false}
        if _storage._returnTypeName != other_storage._returnTypeName {return false}
        if _storage._returnType != other_storage._returnType {return false}
        if _storage._readAccess != other_storage._readAccess {return false}
        if _storage._writeAccess != other_storage._writeAccess {return false}
        if _storage._annotations != other_storage._annotations {return false}
        if _storage._definedInTypeName != other_storage._definedInTypeName {return false}
        if _storage._definedInType != other_storage._definedInType {return false}
        if _storage._attributes != other_storage._attributes {return false}
        if _storage._parserData != other_storage._parserData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TypeList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_TypeList) -> Bool {
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_TypeMap: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_TypeMap) -> Bool {
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Null: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Protobuf_Null) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Attribute: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "arguments"),
    3: .same(proto: "description"),
    4: .same(proto: "parserData"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _arguments: Dictionary<String,Protobuf_TypedCodableValue> = [:]
    var _description_p: String = String()
    var _parserData: Protobuf_StructureWrapper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _arguments = source._arguments
      _description_p = source._description_p
      _parserData = source._parserData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_Attribute) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._arguments != other_storage._arguments {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._parserData != other_storage._parserData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_Range: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: Protobuf_Range) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_FileParserResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "path"),
    2: .same(proto: "module"),
    3: .same(proto: "types"),
    4: .same(proto: "typealiases"),
    5: .same(proto: "inlineRanges"),
    6: .same(proto: "contentSha"),
    7: .same(proto: "linterVersion"),
  ]

  fileprivate class _StorageClass {
    var _path: Protobuf_StringWrapper? = nil
    var _module: Protobuf_StringWrapper? = nil
    var _types: [Protobuf_Type] = []
    var _typealiases: [Protobuf_Typealias] = []
    var _inlineRanges: Dictionary<String,Protobuf_BytesRange> = [:]
    var _contentSha: Protobuf_StringWrapper? = nil
    var _linterVersion: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _path = source._path
      _module = source._module
      _types = source._types
      _typealiases = source._typealiases
      _inlineRanges = source._inlineRanges
      _contentSha = source._contentSha
      _linterVersion = source._linterVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Protobuf_FileParserResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._path != other_storage._path {return false}
        if _storage._module != other_storage._module {return false}
        if _storage._types != other_storage._types {return false}
        if _storage._typealiases != other_storage._typealiases {return false}
        if _storage._inlineRanges != other_storage._inlineRanges {return false}
        if _storage._contentSha != other_storage._contentSha {return false}
        if _storage._linterVersion != other_storage._linterVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Protobuf_FileParserResultList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  func _protobuf_generated_isEqualTo(other: Protobuf_FileParserResultList) -> Bool {
    if self.value != other.value {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
